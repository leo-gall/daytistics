import "../../Fastfile"

default_platform(:ios)


platform :ios do
  # Authenticate with Apple Store
  private_lane :authenticate_apple_store do
    app_store_connect_api_key(
      key_id: ENV["ASC_KEY_ID"],
      issuer_id: ENV["ASC_ISSUER_ID"],
      key_content: ENV["ASC_KEY_P8_BASE64"],
      is_key_content_base64: true,
      in_house: false
    )
  end

  # Build iOS app
  lane :build_ipa do |options|
    authenticate_apple_store
    
    build_flutter_app(
      type: "ipa",
      no_codesign: options[:no_codesign] || false,
      config_only: options[:config_only] || false,
      build_number: options[:build_number] || get_build_number('appstore'),
      version_number: options[:version_number] || get_version_from_pubspec(),
      store: "appstore",
      env_vars: options[:env_vars] || []
    )
  end


desc "Release a new build to Apple Store"
lane :release_app_store do |options|
  verify_env(envs: [
    "ASC_KEY_ID",
    "ASC_ISSUER_ID",
    "ASC_KEY_P8_BASE64",
    "APP_BUNDLE_ID",
    "MATCH_PASSWORD",
    "MATCH_GIT_BASIC_AUTHORIZATION",
  ])

  authenticate_apple_store

  build_number = options.fetch(:build_number, get_build_number('appstore'))
  version_number = options.fetch(:version_number, get_version_from_pubspec())

  if !is_ci && (!options[:version_number])
    continue = UI.confirm("Deploying version #{version_number} (from pubspec.yaml) to App Store. Continue?")
    UI.user_error!("Aborted") unless continue
  end

  UI.message("Syncing certificates and profiles")
  setup_ci if is_ci

  sync_code_signing(
    type: "appstore",
    readonly: is_ci,
  )

  build_ipa(
    build_number: build_number,
    version_number: version_number,
    env_vars: options[:env_vars] || []
  )

  build_app(
    skip_build_archive: true,
    archive_path: "../build/ios/archive/Runner.xcarchive",
  )

  if File.file?("../ios/Runner/GoogleService-Info.plist") && File.directory?("../ios/Pods/FirebaseCrashlytics")
    upload_symbols_to_crashlytics(
      gsp_path: "../ios/Runner/GoogleService-Info.plist"
    )
  end

  # Remove AppFrameworkInfo.plist from .ipa before upload
  ipa_path = lane_context[:IPA_OUTPUT_PATH]
  sh("mkdir -p temp_payload")
  sh("unzip -q '#{ipa_path}' -d temp_payload")
  sh("rm -f temp_payload/Payload/Runner.app/Frameworks/AppFrameworkInfo.plist")
  sh("cd temp_payload && zip -qr fixed.ipa Payload")
  sh("mv temp_payload/fixed.ipa '#{ipa_path}'")
  sh("rm -rf temp_payload")

  upload_to_testflight(
    skip_waiting_for_build_processing: true
  )
end
  
  desc "Builds the application without deploying it"
  lane :build_without_deploy do |options|
    verify_env(envs: [
      "ASC_KEY_ID",
      "ASC_ISSUER_ID",
      "ASC_KEY_P8_BASE64",
      "APP_BUNDLE_ID",
      "MATCH_PASSWORD",
      "MATCH_GIT_BASIC_AUTHORIZATION",
    ])

    authenticate_apple_store

    build_number = options.fetch(:build_number, get_build_number('appstore'))
    version_number = options.fetch(:version_number, get_version_from_pubspec())

    if is_ci
      UI.message("CI detected. Setting up CI environment")
      setup_ci
    end

    sync_code_signing(
      type: "appstore",
      readonly: is_ci,
    )

    build_ipa(
      build_number: build_number,
      version_number: version_number,
      env_vars: options[:env_vars] || []
    )

    build_app(
      skip_build_archive: true,
      archive_path: "../build/ios/archive/Runner.xcarchive",
    )
  end
end
