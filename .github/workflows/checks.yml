name: Quality Checks
on:
  push:
    branches:
      - dev
      - main
  pull_request:
    branches:
      - dev
      - main

jobs:
  analyze:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: subosito/flutter-action@v2
      - uses: denoland/setup-deno@v2
        with:
          deno-version: v2.x

      - name: Install dependencies
        working-directory: ./daytistics
        run: flutter pub get
      - name: Create .env file
        working-directory: ./daytistics
        run: touch .env
      - name: Run built-in linter (Flutter)
        working-directory: ./daytistics
        run: flutter analyze
      - name: Run custom linter (Flutter)
        working-directory: ./daytistics
        run: dart run custom_lint
      - name: Run linter (Deno)
        working-directory: ./daytistics
        run: deno lint

  unit-tests:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: subosito/flutter-action@v2

      - name: Install dependencies
        working-directory: ./daytistics
        run: flutter pub get
      - name: Create .env file
        working-directory: ./daytistics
        run: touch .env
      - name: Run tests (Flutter)
        working-directory: ./daytistics
        run: flutter test

  e2e-tests:
    name: E2E Tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - uses: denoland/setup-deno@v2
        with:
          deno-version: v2.x

      - name: Run Supabase Containers
        working-directory: ./daytistics
        run: npx supabase start

      - name: Storing Supabase secrets
        id: supabase-keys
        working-directory: ./daytistics
        run: |
          # Parse each line from supabase status and set as output
          while IFS= read -r line; do
            name=$(echo "$line" | cut -d '=' -f1)
            value=$(echo "$line" | cut -d '=' -f2-)
            echo "$name=$value" >> $GITHUB_OUTPUT
          done < <(npx supabase status -o env)
        shell: bash

      - name: Clean environment variables
        id: clean-env
        shell: bash
        run: |
          # Remove quotes from each variable and set in GitHub environment
          echo "ANON_KEY=$(echo "$ANON_KEY" | sed 's/^"//; s/"$//')" >> $GITHUB_ENV
          echo "API_URL=$(echo "$API_URL" | sed 's/^"//; s/"$//')" >> $GITHUB_ENV
          echo "DB_URL=$(echo "$DB_URL" | sed 's/^"//; s/"$//')" >> $GITHUB_ENV
          echo "GRAPHQL_URL=$(echo "$GRAPHQL_URL" | sed 's/^"//; s/"$//')" >> $GITHUB_ENV
          echo "INBUCKET_URL=$(echo "$INBUCKET_URL" | sed 's/^"//; s/"$//')" >> $GITHUB_ENV
          echo "JWT_SECRET=$(echo "$JWT_SECRET" | sed 's/^"//; s/"$//')" >> $GITHUB_ENV
          echo "S3_ACCESS_KEY=$(echo "$S3_PROTOCOL_ACCESS_KEY_ID" | sed 's/^"//; s/"$//')" >> $GITHUB_ENV
          echo "S3_SECRET_KEY=$(echo "$S3_PROTOCOL_ACCESS_KEY_SECRET" | sed 's/^"//; s/"$//')" >> $GITHUB_ENV
          echo "S3_REGION=$(echo "$S3_PROTOCOL_REGION" | sed 's/^"//; s/"$//')" >> $GITHUB_ENV
          echo "SERVICE_ROLE_KEY=$(echo "$SERVICE_ROLE_KEY" | sed 's/^"//; s/"$//')" >> $GITHUB_ENV
          echo "STORAGE_S3_URL=$(echo "$STORAGE_S3_URL" | sed 's/^"//; s/"$//')" >> $GITHUB_ENV
          echo "STUDIO_URL=$(echo "$STUDIO_URL" | sed 's/^"//; s/"$//')" >> $GITHUB_ENV
        env:
          ANON_KEY: ${{ steps.supabase-keys.outputs.ANON_KEY }}
          API_URL: ${{ steps.supabase-keys.outputs.API_URL }}
          DB_URL: ${{ steps.supabase-keys.outputs.DB_URL }}
          GRAPHQL_URL: ${{ steps.supabase-keys.outputs.GRAPHQL_URL }}
          INBUCKET_URL: ${{ steps.supabase-keys.outputs.INBUCKET_URL }}
          JWT_SECRET: ${{ steps.supabase-keys.outputs.JWT_SECRET }}
          S3_PROTOCOL_ACCESS_KEY_ID: ${{ steps.supabase-keys.outputs.S3_PROTOCOL_ACCESS_KEY_ID }}
          S3_PROTOCOL_ACCESS_KEY_SECRET: ${{ steps.supabase-keys.outputs.S3_PROTOCOL_ACCESS_KEY_SECRET }}
          S3_PROTOCOL_REGION: ${{ steps.supabase-keys.outputs.S3_PROTOCOL_REGION }}
          SERVICE_ROLE_KEY: ${{ steps.supabase-keys.outputs.SERVICE_ROLE_KEY }}
          STORAGE_S3_URL: ${{ steps.supabase-keys.outputs.STORAGE_S3_URL }}
          STUDIO_URL: ${{ steps.supabase-keys.outputs.STUDIO_URL }}

      - name: Create .env file
        working-directory: ./daytistics
        run: |
          touch .env
          echo SUPABASE_URL="${{ steps.supabase-keys.outputs.API_URL }}" >> .env.github
          echo SUPABASE_SERVICE_ROLE_KEY="${{ steps.supabase-keys.outputs.SERVICE_ROLE_KEY }}" >> .env.github
          echo OPENAI_API_KEY="${{ secrets.OPENAI_API_KEY }}" >> .env.github
          echo POSTHOG_API_KEY="${{ secrets.POSTHOG_API_KEY }}" >> .env.github
          echo SENTRY_DSN="${{ secrets.SENTRY_DSN }}" >> .env.github
          echo SECRET_KEY="${{ secrets.SECRET_KEY }}" >> .env.github
          echo ENVIRONMENT="pipeline" >> .env.github
          cat .env

      - name: Run edge functions
        working-directory: ./daytistics
        run: nohup npx supabase functions serve --env-file=./.env.github &


      - name: Run tests (Deno)
        working-directory: ./daytistics
        run: deno test --env-file=./.env.github --allow-all

          